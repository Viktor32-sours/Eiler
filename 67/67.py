"""
Начиная с вершины представленного ниже треугольника и переходя к прилежащим числам в следующем ряду, 
максимальная возможная сумма пройденных чисел по пути от вершины до основания равна 23.

3
7 4
2 4 6
8 5 9 3

Т.е., 3 + 7 + 4 + 9 = 23.

Найти максимальную сумму при переходе от вершины до основания треугольника, представленного текстовым файлом 
размером 15КБ triangle.txt (щелкнуть правой кнопкой мыши и выбрать 'Save Link/Target As...'), в котором 
содержится треугольник с одной сотней строк.

ПРИМЕЧАНИЕ: Это намного усложненная версия 18-й задачи. Данную задачу нельзя решить, испробовав каждый 
возможный вариант, поскольку всего их 2^99! Если бы удалось проверять один триллион (10^12) вариантов в секунду, 
потребовалось бы двадцать биллионов лет, чтобы испробовать их все. Существует эффективный алгоритм решения 
данной задачи. ;o)


Ответ: 7273
"""

def open_read(txt):
    triangle = []
    with open(txt, 'r') as f:
        for line in f:
            st = line.strip().split(' ')
            triangle.append(st)
        return triangle     

def main():
    txt = '67.txt'
    triangle = open_read(txt)
   
    # начинаем снизу пирамиды и движемся вверх
    for i in range(len(triangle)-1, 0, -1):

        for y in range(0, len(triangle[i])-1):
            # суммируем каждый элемент верхнего ряда с каждым из двух
            # соседних нижнего ряда
            sum_l = int(triangle[i-1][y]) + int(triangle[i][y])
            sum_r = int(triangle[i-1][y]) + int(triangle[i][y+1])
            
            # для нахождения максимальной суммы пути
            triangle[i-1][y] = max(sum_l, sum_r) # переписываем значение узла
            # верхнего ряда на максимальную сумму
            
            # для нахождения минимальной суммы пути
            # triangle[i-1][y] = min(sum_l, sum_r)  
                
    
    # for line in triangle:
    #     print(line)
    print(f'Максимальная сумма: {triangle[0][0]}')

if __name__ == "__main__":
    main()